#!/usr/bin/env ruby

# A few helpful tips about the Rules file:
#
# * The string given to #compile and #route are matching patterns for
#   identifiers--not for paths. Therefore, you can’t match on extension.
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

preprocess do
  ## authors may unpublish items by setting meta attribute publish: false
  #items.delete_if { |item| item[:publish] == false }

  # copies files (images, videos) from /static to the output directory
  copy_static
end

compile '/stylesheet/' do
  # don’t filter or layout ¿o si?
  filter :relativize_paths, :type => :css
end
compile '/plano/' do
  # don’t filter or layout ¿o si?
  filter :relativize_paths, :type => :css
end

compile '/' do
    filter :erb
    layout 'portada'
  #Paths relativos (revisar contenido estático)
  filter :relativize_paths, :type => :html
  filter :relativize_paths, :type => :css

end

compile '*' do
  if item.binary?
    # don’t filter binary items
  else
    filtro= item[:filtro].nil? ? nil : item[:filtro]
    if filtro == 'md' || filtro=='markdown'
      filter :erb
      filter :rdiscount
    elsif filtro == 'haml'
      filter :haml
    else
      filter :erb
    end
    #layout 'default'
  end

 # use layouts with .html extension or layout specified in meta
 # item[:layout] = "default" unless item[:layout] || File.extname(route_path(item)) == '.html' 

  #layout 'default' unless item[:layout] == "none"
  # la siguiente pretendo que sea que el layout sea default
  unless item[:layout]
    layout 'default' 
  else
    layout item[:layout] 
  end

  #Paths relativos (revisar contenido estático)
  filter :relativize_paths, :type => :html
  filter :relativize_paths, :type => :css

end

route '/stylesheet/' do
  '/style.css'
end
route '/plano/' do
  '/plano.css'
end

route '*' do
  if item.binary?
    # Write item with identifier /foo/ to /foo.ext
    item.identifier.chop + '.' + item[:extension]
  else
    # Write item with identifier /foo/ to /foo/index.html
    item.identifier + 'index.html'
  end
end

layout '*', :erb
